// Generated by gencpp from file custom_msgs/Detection.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSGS_MESSAGE_DETECTION_H
#define CUSTOM_MSGS_MESSAGE_DETECTION_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace custom_msgs
{
template <class ContainerAllocator>
struct Detection_
{
  typedef Detection_<ContainerAllocator> Type;

  Detection_()
    : class_name()
    , confidence(0.0)
    , x_min(0)
    , y_min(0)
    , x_max(0)
    , y_max(0)
    , detected_color()
    , shape()  {
    }
  Detection_(const ContainerAllocator& _alloc)
    : class_name(_alloc)
    , confidence(0.0)
    , x_min(0)
    , y_min(0)
    , x_max(0)
    , y_max(0)
    , detected_color(_alloc)
    , shape(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _class_name_type;
  _class_name_type class_name;

   typedef float _confidence_type;
  _confidence_type confidence;

   typedef int32_t _x_min_type;
  _x_min_type x_min;

   typedef int32_t _y_min_type;
  _y_min_type y_min;

   typedef int32_t _x_max_type;
  _x_max_type x_max;

   typedef int32_t _y_max_type;
  _y_max_type y_max;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _detected_color_type;
  _detected_color_type detected_color;

   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _shape_type;
  _shape_type shape;





  typedef boost::shared_ptr< ::custom_msgs::Detection_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msgs::Detection_<ContainerAllocator> const> ConstPtr;

}; // struct Detection_

typedef ::custom_msgs::Detection_<std::allocator<void> > Detection;

typedef boost::shared_ptr< ::custom_msgs::Detection > DetectionPtr;
typedef boost::shared_ptr< ::custom_msgs::Detection const> DetectionConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msgs::Detection_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msgs::Detection_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msgs::Detection_<ContainerAllocator1> & lhs, const ::custom_msgs::Detection_<ContainerAllocator2> & rhs)
{
  return lhs.class_name == rhs.class_name &&
    lhs.confidence == rhs.confidence &&
    lhs.x_min == rhs.x_min &&
    lhs.y_min == rhs.y_min &&
    lhs.x_max == rhs.x_max &&
    lhs.y_max == rhs.y_max &&
    lhs.detected_color == rhs.detected_color &&
    lhs.shape == rhs.shape;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msgs::Detection_<ContainerAllocator1> & lhs, const ::custom_msgs::Detection_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::Detection_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::Detection_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::Detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::Detection_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::Detection_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::Detection_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msgs::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "7fe439705ef9b9df34d56b132c400dc9";
  }

  static const char* value(const ::custom_msgs::Detection_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x7fe439705ef9b9dfULL;
  static const uint64_t static_value2 = 0x34d56b132c400dc9ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msgs::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msgs/Detection";
  }

  static const char* value(const ::custom_msgs::Detection_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msgs::Detection_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# An individual detection\n"
"string class_name           # e.g. \"soccer_ball\", \"traffic_cone\", \"stop_sign\", \"person\", \"chair\"\n"
"float32 confidence          # detection confidence [0.0 to 1.0]\n"
"int32 x_min                 # bounding box pixel coords\n"
"int32 y_min\n"
"int32 x_max\n"
"int32 y_max\n"
"string detected_color       # e.g. \"red\", \"green\", \"blue\", \"yellow\", \"orange\"\n"
"string shape                # e.g. \"spherical\", \"conical\", \"octagonal\", \"human\", \"chair-like\"\n"
;
  }

  static const char* value(const ::custom_msgs::Detection_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msgs::Detection_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.class_name);
      stream.next(m.confidence);
      stream.next(m.x_min);
      stream.next(m.y_min);
      stream.next(m.x_max);
      stream.next(m.y_max);
      stream.next(m.detected_color);
      stream.next(m.shape);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Detection_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msgs::Detection_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msgs::Detection_<ContainerAllocator>& v)
  {
    s << indent << "class_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.class_name);
    s << indent << "confidence: ";
    Printer<float>::stream(s, indent + "  ", v.confidence);
    s << indent << "x_min: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x_min);
    s << indent << "y_min: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y_min);
    s << indent << "x_max: ";
    Printer<int32_t>::stream(s, indent + "  ", v.x_max);
    s << indent << "y_max: ";
    Printer<int32_t>::stream(s, indent + "  ", v.y_max);
    s << indent << "detected_color: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.detected_color);
    s << indent << "shape: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.shape);
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSGS_MESSAGE_DETECTION_H
