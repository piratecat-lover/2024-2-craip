// Generated by gencpp from file custom_msgs/ContourLabel.msg
// DO NOT EDIT!


#ifndef CUSTOM_MSGS_MESSAGE_CONTOURLABEL_H
#define CUSTOM_MSGS_MESSAGE_CONTOURLABEL_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <geometry_msgs/Point.h>
#include <std_msgs/String.h>

namespace custom_msgs
{
template <class ContainerAllocator>
struct ContourLabel_
{
  typedef ContourLabel_<ContainerAllocator> Type;

  ContourLabel_()
    : centroids()
    , labels()  {
    }
  ContourLabel_(const ContainerAllocator& _alloc)
    : centroids(_alloc)
    , labels(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::geometry_msgs::Point_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::geometry_msgs::Point_<ContainerAllocator> >> _centroids_type;
  _centroids_type centroids;

   typedef std::vector< ::std_msgs::String_<ContainerAllocator> , typename std::allocator_traits<ContainerAllocator>::template rebind_alloc< ::std_msgs::String_<ContainerAllocator> >> _labels_type;
  _labels_type labels;





  typedef boost::shared_ptr< ::custom_msgs::ContourLabel_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::custom_msgs::ContourLabel_<ContainerAllocator> const> ConstPtr;

}; // struct ContourLabel_

typedef ::custom_msgs::ContourLabel_<std::allocator<void> > ContourLabel;

typedef boost::shared_ptr< ::custom_msgs::ContourLabel > ContourLabelPtr;
typedef boost::shared_ptr< ::custom_msgs::ContourLabel const> ContourLabelConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::custom_msgs::ContourLabel_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::custom_msgs::ContourLabel_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::custom_msgs::ContourLabel_<ContainerAllocator1> & lhs, const ::custom_msgs::ContourLabel_<ContainerAllocator2> & rhs)
{
  return lhs.centroids == rhs.centroids &&
    lhs.labels == rhs.labels;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::custom_msgs::ContourLabel_<ContainerAllocator1> & lhs, const ::custom_msgs::ContourLabel_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace custom_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::ContourLabel_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::custom_msgs::ContourLabel_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::ContourLabel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::custom_msgs::ContourLabel_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::ContourLabel_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::custom_msgs::ContourLabel_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::custom_msgs::ContourLabel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "5c15b036d0822a1bdfe9a97fda089070";
  }

  static const char* value(const ::custom_msgs::ContourLabel_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x5c15b036d0822a1bULL;
  static const uint64_t static_value2 = 0xdfe9a97fda089070ULL;
};

template<class ContainerAllocator>
struct DataType< ::custom_msgs::ContourLabel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "custom_msgs/ContourLabel";
  }

  static const char* value(const ::custom_msgs::ContourLabel_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::custom_msgs::ContourLabel_<ContainerAllocator> >
{
  static const char* value()
  {
    return "geometry_msgs/Point[] centroids\n"
"std_msgs/String[] labels\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/String\n"
"string data\n"
;
  }

  static const char* value(const ::custom_msgs::ContourLabel_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::custom_msgs::ContourLabel_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.centroids);
      stream.next(m.labels);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ContourLabel_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::custom_msgs::ContourLabel_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::custom_msgs::ContourLabel_<ContainerAllocator>& v)
  {
    s << indent << "centroids[]" << std::endl;
    for (size_t i = 0; i < v.centroids.size(); ++i)
    {
      s << indent << "  centroids[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::Point_<ContainerAllocator> >::stream(s, indent + "    ", v.centroids[i]);
    }
    s << indent << "labels[]" << std::endl;
    for (size_t i = 0; i < v.labels.size(); ++i)
    {
      s << indent << "  labels[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::String_<ContainerAllocator> >::stream(s, indent + "    ", v.labels[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // CUSTOM_MSGS_MESSAGE_CONTOURLABEL_H
